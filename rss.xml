<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>PO-Blog</title><description>Pesquisa Operacional Blog</description><link>https://fuwari.vercel.app/</link><language>pt_br</language><item><title>Algoritmos de Caminho Minimo</title><link>https://fuwari.vercel.app/posts/algoritmos-caminho-minimo/</link><guid isPermaLink="true">https://fuwari.vercel.app/posts/algoritmos-caminho-minimo/</guid><pubDate>Fri, 05 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Algoritmos de Caminho Mínimo&lt;/h1&gt;
&lt;h2&gt;1. Definição&lt;/h2&gt;
&lt;p&gt;Caminho mínimo é encontrar a rota de menor custo (distância, tempo, valor) entre nós em um grafo
Solução essencial em roteamento, logística, redes e planejamento.&lt;/p&gt;
&lt;h2&gt;2. Algoritmos Principais&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dijkstra&lt;/strong&gt; – grafos com pesos não-negativos, eficiente para single-source shortest path. Muito usado em GPS e redes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bellman–Ford&lt;/strong&gt; – suporta arestas com peso negativo e detecta ciclos negativos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Floyd–Warshall&lt;/strong&gt; – resolve todos os pares (all-pairs) usando programação dinâmica, ideal para grafos menores.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Johnson&lt;/strong&gt; – combina Bellman-Ford e Dijkstra para todos os pares com arestas negativas (sem ciclos).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problemas com restrições&lt;/strong&gt; (RCSP – Resource Constrained Shortest Path) ou multicritério são NP-difíceis; resolvidos via programação dinâmica ou heurística.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3. Aplicações Práticas&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tráfego urbano e redes elétricas&lt;/strong&gt;: otimização de trajetos e infraestrutura.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Projetos e caminhos críticos (PERT)&lt;/strong&gt;: uso do algoritmo como subrotina em planejamento de projetos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Roteamento de veículos (VRP)&lt;/strong&gt; e &lt;strong&gt;fluxos em redes de comunicação&lt;/strong&gt;: encontrar trajetos que respeitam custos e QoS.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;4. Exemplos Reais&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Distribuidora&lt;/strong&gt;: aplicação do problema do caminho mais curto para otimizar rotas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Problema de Caminho Mínimo com Restrições&lt;/strong&gt;: usado para escalonamento de agentes móveis, QoS em redes veiculares e roteamento em redes de computadores.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
</content:encoded></item><item><title>Scheduling</title><link>https://fuwari.vercel.app/posts/scheduling/</link><guid isPermaLink="true">https://fuwari.vercel.app/posts/scheduling/</guid><pubDate>Fri, 05 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Escalonamento (Scheduling)&lt;/h1&gt;
&lt;h2&gt;1. Definição&lt;/h2&gt;
&lt;p&gt;Scheduling é uma área da Pesquisa Operacional que foca na &lt;strong&gt;atribuição e ordenação de tarefas&lt;/strong&gt; para recursos limitados (máquinas, CPUs, operadores). O objetivo: otimizar métricas como makespan, tempo de resposta, throughput ou cumprimento de prazos.&lt;/p&gt;
&lt;h2&gt;2. Políticas e Algoritmos Típicos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;FCFS (First-Come-First-Served)&lt;/strong&gt; – ordem de chegada.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SJF (Shortest Job First)&lt;/strong&gt; – tarefas mais curtas primeiro; reduz tempo de espera médio, mas risco de inanição.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Round Robin (RR)&lt;/strong&gt; – cada tarefa recebe uma fatia de tempo (quantum) de forma cíclica; evita inanição.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Job Shop Scheduling (JSSP)&lt;/strong&gt; – sequenciamento de operações em múltiplas máquinas; geralmente NP-difícil.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Busca Tabu e heurísticas meta-heurísticas&lt;/strong&gt; para otimizar escalonamento complexo.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PERT/CPM&lt;/strong&gt; – redes de tarefas com cálculo de caminho crítico para gestão de projetos.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3. Métricas Importantes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Throughput (débitos de jobs/hora)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Turnaround Time&lt;/strong&gt; – tempo da submissão ao término da tarefa.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tempo de resposta&lt;/strong&gt; – importante para sistemas interativos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Utilização do recurso&lt;/strong&gt;, &lt;strong&gt;cumprimento de deadlines&lt;/strong&gt;, &lt;strong&gt;previsibilidade de execução&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;4. Exemplos Reais&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Projeto universitário (carro elétrico)&lt;/strong&gt;: escalonamento de pessoal conforme disponibilidade e preferências, alcançando satisfação de 96%.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Job Shop com trocas de ferramenta&lt;/strong&gt;: minimizar atrasos, paradas e trocas via Busca Tabu em sistema de manufatura flexível (SMF).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sistemas operacionais&lt;/strong&gt;: algoritmo Round Robin usado em Windows com múltiplas filas e envelhecimento de processos.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
</content:encoded></item><item><title>Teoria das filas</title><link>https://fuwari.vercel.app/posts/teoria-das-filas/</link><guid isPermaLink="true">https://fuwari.vercel.app/posts/teoria-das-filas/</guid><pubDate>Fri, 05 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Teoria das Filas&lt;/h1&gt;
&lt;h2&gt;1. Definição&lt;/h2&gt;
&lt;p&gt;A Teoria das Filas (Queueing Theory) estuda &lt;strong&gt;sistemas de espera&lt;/strong&gt; onde &quot;clientes&quot; (pessoas, dados, veículos, etc.) aguardam atendimento por &quot;servidores&quot;. Utiliza-se modelos matemáticos para estimar desempenho, como tempo médio de espera, tamanho da fila e utilização dos recursos.&lt;/p&gt;
&lt;h2&gt;2. Componentes-chaves&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Taxa de chegada (λ)&lt;/strong&gt; – frequência com que clientes chegam.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Taxa de serviço (μ)&lt;/strong&gt; – frequência com que são atendidos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Servidores&lt;/strong&gt; – quantidade de atendentes ou máquinas (modelo c).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disciplina de fila&lt;/strong&gt; – FIFO (primeiro a chegar, primeiro atendido), prioridade, LIFO etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Capacidade de fila&lt;/strong&gt; – se é finita ou infinita.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3. Modelos Clássicos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;M/M/1&lt;/strong&gt; – chegadas Poisson e serviços exponenciais com 1 servidor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;M/M/c&lt;/strong&gt; – múltiplos servidores.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;M/G/1&lt;/strong&gt; – serviço com distribuição geral.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Distribuição de Erlang&lt;/strong&gt; – soma de k serviços exponenciais; útil quando atendimento envolve várias etapas. Fórmulas:&lt;br /&gt;
$$
\begin{equation*}
L_q = \frac{(1 + k)\lambda}{2k\mu(\mu - \lambda)}, \quad
W_q = \frac{(1 + k)\lambda}{2k\mu(\mu - \lambda)}, \quad
W = W_q + \frac{1}{\mu}
\end{equation*}
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;4. Medidas de Desempenho&lt;/h2&gt;
&lt;p&gt;$$
\begin{equation*}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[
L_q
]: \textnormal{número médio de clientes na fila}.
\end{equation*}
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
\begin{equation*}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[
W_q
]: \textnormal{tempo médio de espera na fila}.&lt;br /&gt;
\end{equation*}
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[
W
]: \textnormal{tempo médio no sistema (espera + atendimento)}.
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[
\rho = \frac{\lambda}{c \cdot \mu}
]: \textnormal{utilização dos recursos.}&lt;br /&gt;
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;5. Exemplos Práticos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Lava-rápido em Porto Velho (RO)&lt;/strong&gt;: análise com modelo M/M/S de fila finita para medir desempenho do serviço e sugerir melhorias.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sala de emergência hospitalar&lt;/strong&gt;: modelar chegadas e atendimentos para prever tempos de espera e dimensionar pessoal.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Call center&lt;/strong&gt;: usar M/M/c para definir número de atendentes conforme demanda e alternativas via programação inteira.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Esses exemplos mostram a aplicação real da teoria para avaliar e melhorar sistemas de atendimento, promovendo eficiência e satisfação.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
</content:encoded></item></channel></rss>